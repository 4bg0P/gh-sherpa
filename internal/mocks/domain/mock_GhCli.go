// Code generated by mockery v2.32.4. DO NOT EDIT.

package domain

import (
	domain "github.com/InditexTech/gh-sherpa/internal/domain"
	mock "github.com/stretchr/testify/mock"
)

// MockGhCli is an autogenerated mock type for the GhCli type
type MockGhCli struct {
	mock.Mock
}

type MockGhCli_Expecter struct {
	mock *mock.Mock
}

func (_m *MockGhCli) EXPECT() *MockGhCli_Expecter {
	return &MockGhCli_Expecter{mock: &_m.Mock}
}

// Execute provides a mock function with given fields: result, args
func (_m *MockGhCli) Execute(result interface{}, args []string) error {
	ret := _m.Called(result, args)

	var r0 error
	if rf, ok := ret.Get(0).(func(interface{}, []string) error); ok {
		r0 = rf(result, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockGhCli_Execute_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Execute'
type MockGhCli_Execute_Call struct {
	*mock.Call
}

// Execute is a helper method to define mock.On call
//   - result interface{}
//   - args []string
func (_e *MockGhCli_Expecter) Execute(result interface{}, args interface{}) *MockGhCli_Execute_Call {
	return &MockGhCli_Execute_Call{Call: _e.mock.On("Execute", result, args)}
}

func (_c *MockGhCli_Execute_Call) Run(run func(result interface{}, args []string)) *MockGhCli_Execute_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(interface{}), args[1].([]string))
	})
	return _c
}

func (_c *MockGhCli_Execute_Call) Return(err error) *MockGhCli_Execute_Call {
	_c.Call.Return(err)
	return _c
}

func (_c *MockGhCli_Execute_Call) RunAndReturn(run func(interface{}, []string) error) *MockGhCli_Execute_Call {
	_c.Call.Return(run)
	return _c
}

// GetRepo provides a mock function with given fields:
func (_m *MockGhCli) GetRepo() (*domain.Repository, error) {
	ret := _m.Called()

	var r0 *domain.Repository
	var r1 error
	if rf, ok := ret.Get(0).(func() (*domain.Repository, error)); ok {
		return rf()
	}
	if rf, ok := ret.Get(0).(func() *domain.Repository); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*domain.Repository)
		}
	}

	if rf, ok := ret.Get(1).(func() error); ok {
		r1 = rf()
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockGhCli_GetRepo_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetRepo'
type MockGhCli_GetRepo_Call struct {
	*mock.Call
}

// GetRepo is a helper method to define mock.On call
func (_e *MockGhCli_Expecter) GetRepo() *MockGhCli_GetRepo_Call {
	return &MockGhCli_GetRepo_Call{Call: _e.mock.On("GetRepo")}
}

func (_c *MockGhCli_GetRepo_Call) Run(run func()) *MockGhCli_GetRepo_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockGhCli_GetRepo_Call) Return(repo *domain.Repository, err error) *MockGhCli_GetRepo_Call {
	_c.Call.Return(repo, err)
	return _c
}

func (_c *MockGhCli_GetRepo_Call) RunAndReturn(run func() (*domain.Repository, error)) *MockGhCli_GetRepo_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockGhCli creates a new instance of MockGhCli. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockGhCli(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockGhCli {
	mock := &MockGhCli{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
